#!/usr/bin/env python3


# Imports and provides IP address manipulation
# Imports from library classes and funtion of scapy to manipulate network packeges 
# sr1, IP ICMP, TCP, conf

import ipaddress
from scapy.all import sr1, IP, ICMP, TCP, conf


# Desativates scapy verbosity, so scapy dont print error msg when execute script
 conf.verb = 0



# Function that scan host ports
def port_scan(host):
    open_ports = []  
    for port in range(1, 1025):  # Escaneia portas comuns (1-1024)
        response = sr1(IP(dst=str(host))/TCP(dport=port, flags="S"), timeout=1, verbose=0)
        if response and response.haslayer(TCP) and response.getlayer(TCP).flags == 0x12:
            open_ports.append(port)
            # Envia RST para fechar a conexão aberta
            sr1(IP(dst=str(host))/TCP(dport=port, flags="R"), timeout=1, verbose=0)
    return open_ports

target_ip = input("Enter an IP address to scan: ")

try:
    ipaddress.IPv4Address(target_ip)
except ipaddress.AddressValueError:
    print(f"Invalid IP address: {target_ip}")
else:
    print(f"Scanning host {target_ip}...")

    # Realiza ping ICMP para verificar se o host está vivo
    response = sr1(IP(dst=target_ip) / ICMP(), timeout=2, verbose=0)
    if response is None:
        print(f"No response from {target_ip}")
    else:
        print(f"{target_ip} is alive")

        # Se o host responde, realiza o escaneamento de portas
        open_ports = port_scan(target_ip)
        if open_ports:
            print(f"Open ports on {target_ip}: {open_ports}")
        else:
            print(f"No open ports found on {target_ip}.")
